// Generated by CoffeeScript 1.7.1
(function() {
  $(function($) {
    'use strict';
    var $algo, $dist, $filtered_results, $filtered_results_tbody, $term, $unfiltered_results, $unfiltered_results_body, algo, builder, dist, filter, reset_transducer, term, transducer;
    hljs.initHighlightingOnLoad();
    transducer = null;
    $term = $('input.query-term');
    $dist = $('select.edit-distance');
    $algo = $('select.algorithm');
    term = '';
    dist = 2;
    algo = 'transposition';
    builder = new levenshtein.Builder().dictionary(levenshtein.programming_languages, true).include_distance(true).case_insensitive_sort(true).sort_candidates(true);
    reset_transducer = function() {
      return transducer = builder.algorithm(algo).transducer();
    };
    $unfiltered_results = $('table.unfiltered-results');
    $unfiltered_results_body = $unfiltered_results.find('tbody:first');
    $filtered_results = $('table.filtered-results');
    $filtered_results_tbody = $filtered_results.find('tbody:first');
    $.each(levenshtein.programming_languages, function(index, language) {
      return $unfiltered_results_body.append($('<tr>' + ("<td class='language'>" + language + "</td>") + '</tr>'));
    });
    filter = function() {
      if (term = $.trim($term.val())) {
        $unfiltered_results.hide();
        $filtered_results.hide();
        $filtered_results_tbody.empty();
        $.each(transducer.transduce(term, dist), function(index, _arg) {
          var candidate, distance;
          candidate = _arg[0], distance = _arg[1];
          return $filtered_results_tbody.append($('<tr>' + ("<td class='language'>" + candidate + "</td>") + ("<td class='distance'>" + distance + "</td>") + '</tr>'));
        });
        $filtered_results.show();
      } else {
        $filtered_results.hide();
        $unfiltered_results.show();
      }
      return null;
    };
    $term.keyup(function(event) {
      filter();
      return true;
    });
    $dist.change(function(event) {
      dist = +$dist.find('option:selected').val();
      filter();
      return true;
    });
    $algo.change(function(event) {
      algo = $algo.find('option:selected').val();
      reset_transducer();
      filter();
      return true;
    });
    $dist.val(dist);
    $algo.find("option[value='" + algo + "']").prop('selected', true);
    reset_transducer();
    filter();
    $term.focus();
    return true;
  });

}).call(this);
