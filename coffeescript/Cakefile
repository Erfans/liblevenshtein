require 'coffee-script/register' #-> Register the .coffee extension

fs            = require 'fs'
{print}       = require 'sys'
{spawn, exec} = require 'child_process'

build = (watch, callback) ->
  if typeof watch is 'function'
    callback = watch
    watch = false
  options = ['-b', '-c', '-o', 'lib', 'src']
  options.unshift '-w' if watch

  coffee = spawn 'coffee', options
  coffee.stdout.on 'data', (data) -> print data.toString()
  coffee.stderr.on 'data', (data) -> print data.toString()
  coffee.on 'exit', (status) ->
    throw new Error("An unexpected error occurred") if status isnt 0

    countdown =
      count: 0
      increment: () -> ++ @count
      decrement: () -> @callback() if 0 is (-- @count) and @callback
      callback: callback

    countdown.increment()
    concat_files = (path, files) ->
      fs.open path, 'w', null, (error, fd) ->
        throw error if error

        fs.writeSync fd, '(function(){\n'
        fs.writeSync fd, '"use strict";\n'

        for file in files
          fs.writeSync fd, fs.readFileSync(file, 'utf8')
          fs.writeSync fd, '\n'

        fs.writeSync fd, '}());'
        fs.writeSync fd, '\n'

        fs.close fd, (error) -> throw error if error
        countdown.decrement()

    countdown.increment()
    concat_files 'lib/liblevenshtein.js', [
      'lib/levenshtein.js'
      'lib/levenshtein/distance.js'
      'lib/collection/dawg.js'
      'lib/collection/min-heap.js'
      'lib/levenshtein/transducer.js'
    ]

    countdown.increment()
    concat_files 'lib/levenshtein-transducer.js', [
      'lib/levenshtein.js'
      'lib/collection/dawg.js'
      'lib/levenshtein/transducer.js'
    ]

    countdown.increment()
    concat_files 'lib/levenshtein-distance.js', [
      'lib/levenshtein.js'
      'lib/levenshtein/distance.js'
    ]

    countdown.decrement()

task 'docs', 'Generate annotated source code with Docco', ->
  fs.readdir 'src', (err, contents) ->
    files = ("src/#{file}" for file in contents when /\.coffee$/.test file)
    docco = spawn 'docco', files
    docco.stdout.on 'data', (data) -> print data.toString()
    docco.stderr.on 'data', (data) -> print data.toString()
    docco.on 'exit', (status) -> callback?() if status is 0

task 'build', 'Compile CoffeeScript source files', ->
  build()

task 'minify', 'Builds and minifies liblevenshtein.js', ->
  build ->
    closure = spawn 'gradle', ['minify']
    closure.stdout.on 'data', (data) -> print data.toString()
    closure.stderr.on 'data', (data) -> print data.toString()

task 'watch', 'Recompile CoffeeScript source files when modified', ->
  build true

task 'test', 'Run the test suite', ->
  build ->
    {reporters} = require 'nodeunit'
    wrench = require 'wrench'
    process.chdir __dirname
    reporters.default.run do ->
      test_dirs = ['test']
      for file in wrench.readdirSyncRecursive('test')
        path = "test/#{file}"
        test_dirs.push(path) if fs.lstatSync(path).isDirectory()
      test_dirs.sort()

