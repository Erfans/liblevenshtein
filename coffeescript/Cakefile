require 'coffee-script/register' #-> Register the .coffee extension

fs            = require 'fs'
{print}       = require 'sys'
{spawn, exec} = require 'child_process'

build = (watch, callback) ->
  if typeof watch is 'function'
    callback = watch
    watch = false
  options = ['-b', '-c', '-o', 'lib', 'src']
  options.unshift '-w' if watch

  coffee = spawn 'coffee', options
  coffee.stdout.on 'data', (data) -> print data.toString()
  coffee.stderr.on 'data', (data) -> print data.toString()
  coffee.on 'exit', (status) ->
    throw new Error("An unexpected error occurred") if status isnt 0
    fs.open 'lib/liblevenshtein.js', 'w', null, (error, fd) ->
      throw error if error
      fs.writeSync fd, [
        '(function(){'
          '"use strict";'
          fs.readFileSync('lib/levenshtein.js', 'utf8')
          fs.readFileSync('lib/levenshtein/distance.js', 'utf8')
          fs.readFileSync('lib/collection/dawg.js', 'utf8')
          fs.readFileSync('lib/levenshtein/transducer.js', 'utf8')
        '}());'
      ].join('\n')
      fs.writeSync fd, '\n'
      fs.close fd, (error) ->
        if error
          throw error
        else
          callback?()

task 'docs', 'Generate annotated source code with Docco', ->
  fs.readdir 'src', (err, contents) ->
    files = ("src/#{file}" for file in contents when /\.coffee$/.test file)
    docco = spawn 'docco', files
    docco.stdout.on 'data', (data) -> print data.toString()
    docco.stderr.on 'data', (data) -> print data.toString()
    docco.on 'exit', (status) -> callback?() if status is 0

task 'build', 'Compile CoffeeScript source files', ->
  build()

task 'watch', 'Recompile CoffeeScript source files when modified', ->
  build true

task 'test', 'Run the test suite', ->
  build ->
    {reporters} = require 'nodeunit'
    process.chdir __dirname
    reporters.default.run ['test', 'test/util']
