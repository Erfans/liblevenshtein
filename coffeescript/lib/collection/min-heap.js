// Generated by CoffeeScript 1.7.1
var MinHeap, f, test;

MinHeap = (function() {
  MinHeap.prototype.parent = function(i) {
    return ((i + 1) >> 1) - 1;
  };

  MinHeap.prototype.left_child = function(i) {
    return (i << 1) + 1;
  };

  MinHeap.prototype.right_child = function(i) {
    return (i << 1) + 2;
  };

  MinHeap.prototype.heapify = function(i) {
    var heap, l, r, smallest, tmp;
    l = this.left_child(i);
    r = this.right_child(i);
    heap = this.heap;
    if (l < this.length && this.f(heap[l], heap[i]) < 0) {
      smallest = l;
    } else {
      smallest = i;
    }
    if (r < this.length && this.f(heap[r], heap[smallest]) < 0) {
      smallest = r;
    }
    if (smallest !== i) {
      tmp = heap[i];
      heap[i] = heap[smallest];
      heap[smallest] = tmp;
      this.heapify(smallest);
    }
    return null;
  };

  MinHeap.prototype.build = function() {
    var i;
    i = this.length >> 1;
    while (i >= 0) {
      this.heapify(i);
      i -= 1;
    }
    return null;
  };

  MinHeap.prototype.decrease_key = function(i, key) {
    var c, f, heap, p, parent, tmp;
    f = this.f;
    heap = this.heap;
    c = f(key, heap[i]);
    if (c > 0) {
      throw new Error("Expected " + key + " to be at no more than heap[" + i + "] = " + heap[i]);
    }
    heap[i] = key;
    parent = this.parent;
    p = parent(i);
    while (i && f(heap[p], heap[i]) > 0) {
      tmp = heap[i];
      heap[i] = heap[p];
      heap[p] = tmp;
      i = p;
      p = parent(i);
    }
    return null;
  };

  MinHeap.prototype.sort = function() {
    var heap, i, tmp;
    this.build();
    i = this.length - 1;
    heap = this.heap;
    while (i >= 0) {
      tmp = heap[0];
      heap[0] = heap[i];
      heap[i] = tmp;
      this.length -= 1;
      this.heapify(0);
      i -= 1;
    }
    return null;
  };

  MinHeap.prototype.pop = function() {
    var heap, max;
    if (this.length) {
      heap = this.heap;
      max = heap[0];
      heap[0] = heap[this.length - 1];
      this.length -= 1;
      this.heapify(0);
      return max;
    } else {
      return null;
    }
  };

  MinHeap.prototype.push = function(key) {
    var f, heap, i, p, parent;
    i = this.length;
    this.length += 1;
    parent = this.parent;
    p = parent(i);
    heap = this.heap;
    f = this.f;
    while (i > 0 && f(heap[p], key) > 0) {
      heap[i] = heap[p];
      i = p;
      p = parent(i);
    }
    heap[i] = key;
    return null;
  };

  function MinHeap(f, heap, length) {
    this.f = f;
    this.heap = heap != null ? heap : [];
    this.length = length != null ? length : this.heap.length;
    this.build();
  }

  return MinHeap;

})();

test = function(A, f) {
  var B, b, i;
  B = new MinHeap(f, A.slice());
  console.log(((function() {
    var _results;
    _results = [];
    while ((b = B.pop()) !== null) {
      _results.push(b);
    }
    return _results;
  })()));
  B = new MinHeap(f);
  i = 0;
  while (i < A.length) {
    B.push(A[i]);
    i += 1;
  }
  console.log(((function() {
    var _results;
    _results = [];
    while ((b = B.pop()) !== null) {
      _results.push(b);
    }
    return _results;
  })()));
  B = new MinHeap(f, A.slice());
  B.sort();
  console.log(B.heap);
  B = new MinHeap(f, A.slice());
  B.decrease_key(3, 0);
  console.log(((function() {
    var _results;
    _results = [];
    while ((b = B.pop()) !== null) {
      _results.push(b);
    }
    return _results;
  })()));
  return null;
};

f = function(a, b) {
  return a - b;
};

test([1, 2, 3, 4], f);

test([2, 3, 4, 1], f);

test([3, 4, 1, 2], f);

test([4, 1, 2, 3], f);

test([2, 1, 3, 4], f);

test([1, 3, 4, 2], f);

test([3, 4, 2, 1], f);

test([4, 2, 1, 3], f);

test([2, 3, 1, 4], f);

test([3, 1, 4, 2], f);

test([1, 4, 2, 3], f);

test([4, 2, 3, 1], f);

test([1, 3, 2, 4], f);

test([3, 2, 4, 1], f);

test([2, 4, 1, 3], f);

test([4, 1, 3, 2], f);

test([1, 2, 4, 3], f);

test([2, 4, 3, 1], f);

test([4, 3, 1, 2], f);

test([3, 1, 2, 4], f);

test([4, 3, 2, 1], f);

test([3, 2, 1, 4], f);

test([2, 1, 4, 3], f);

test([1, 4, 3, 2], f);
